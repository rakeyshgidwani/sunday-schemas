// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ArbLiteDepthTier.
const (
	ArbLiteDepthTierL ArbLiteDepthTier = "L"
	ArbLiteDepthTierM ArbLiteDepthTier = "M"
	ArbLiteDepthTierS ArbLiteDepthTier = "S"
)

// Defines values for ArbLiteLongVenue.
const (
	ArbLiteLongVenueKalshi     ArbLiteLongVenue = "kalshi"
	ArbLiteLongVenuePolymarket ArbLiteLongVenue = "polymarket"
)

// Defines values for ArbLiteShortVenue.
const (
	ArbLiteShortVenueKalshi     ArbLiteShortVenue = "kalshi"
	ArbLiteShortVenuePolymarket ArbLiteShortVenue = "polymarket"
)

// Defines values for MarketCategory.
const (
	MarketCategoryCrypto    MarketCategory = "crypto"
	MarketCategoryEconomics MarketCategory = "economics"
	MarketCategoryPolitics  MarketCategory = "politics"
	MarketCategorySports    MarketCategory = "sports"
	MarketCategoryWeather   MarketCategory = "weather"
)

// Defines values for MarketVenues.
const (
	MarketVenuesKalshi     MarketVenues = "kalshi"
	MarketVenuesPolymarket MarketVenues = "polymarket"
)

// Defines values for MoverWindow.
const (
	MoverWindowN1h  MoverWindow = "1h"
	MoverWindowN24h MoverWindow = "24h"
)

// Defines values for ResolutionEventEventType.
const (
	Expiry             ResolutionEventEventType = "expiry"
	MarketClose        ResolutionEventEventType = "market_close"
	ResultAnnouncement ResolutionEventEventType = "result_announcement"
)

// Defines values for ResolutionEventVenueId.
const (
	ResolutionEventVenueIdKalshi     ResolutionEventVenueId = "kalshi"
	ResolutionEventVenueIdPolymarket ResolutionEventVenueId = "polymarket"
)

// Defines values for UnusualMetric.
const (
	UnusualMetricVolatility UnusualMetric = "volatility"
	UnusualMetricVolume     UnusualMetric = "volume"
)

// Defines values for UnusualWindow.
const (
	UnusualWindowN1h  UnusualWindow = "1h"
	UnusualWindowN24h UnusualWindow = "24h"
)

// Defines values for VenueHealthStatus.
const (
	CONNECTED VenueHealthStatus = "CONNECTED"
	DEGRADED  VenueHealthStatus = "DEGRADED"
	STALE     VenueHealthStatus = "STALE"
)

// Defines values for VenueHealthVenueId.
const (
	VenueHealthVenueIdKalshi     VenueHealthVenueId = "kalshi"
	VenueHealthVenueIdPolymarket VenueHealthVenueId = "polymarket"
)

// Defines values for WhaleLiteDirection.
const (
	Buy  WhaleLiteDirection = "buy"
	Sell WhaleLiteDirection = "sell"
)

// Defines values for WhaleLiteImpact.
const (
	WhaleLiteImpactHIGH WhaleLiteImpact = "HIGH"
	WhaleLiteImpactLOW  WhaleLiteImpact = "LOW"
	WhaleLiteImpactMED  WhaleLiteImpact = "MED"
)

// Defines values for WhaleLiteVenueId.
const (
	WhaleLiteVenueIdKalshi     WhaleLiteVenueId = "kalshi"
	WhaleLiteVenueIdPolymarket WhaleLiteVenueId = "polymarket"
)

// Defines values for GetArbitrageOpportunitiesParamsDepthTier.
const (
	GetArbitrageOpportunitiesParamsDepthTierL GetArbitrageOpportunitiesParamsDepthTier = "L"
	GetArbitrageOpportunitiesParamsDepthTierM GetArbitrageOpportunitiesParamsDepthTier = "M"
	GetArbitrageOpportunitiesParamsDepthTierS GetArbitrageOpportunitiesParamsDepthTier = "S"
)

// Defines values for GetWhaleFlowsParamsImpact.
const (
	GetWhaleFlowsParamsImpactHIGH GetWhaleFlowsParamsImpact = "HIGH"
	GetWhaleFlowsParamsImpactLOW  GetWhaleFlowsParamsImpact = "LOW"
	GetWhaleFlowsParamsImpactMED  GetWhaleFlowsParamsImpact = "MED"
)

// Defines values for GetMarketsParamsCategory.
const (
	GetMarketsParamsCategoryCrypto    GetMarketsParamsCategory = "crypto"
	GetMarketsParamsCategoryEconomics GetMarketsParamsCategory = "economics"
	GetMarketsParamsCategoryPolitics  GetMarketsParamsCategory = "politics"
	GetMarketsParamsCategorySports    GetMarketsParamsCategory = "sports"
	GetMarketsParamsCategoryWeather   GetMarketsParamsCategory = "weather"
)

// Defines values for GetMoversParamsWindow.
const (
	GetMoversParamsWindowN1h  GetMoversParamsWindow = "1h"
	GetMoversParamsWindowN24h GetMoversParamsWindow = "24h"
)

// Defines values for GetUnusualActivityParamsMetric.
const (
	GetUnusualActivityParamsMetricVolatility GetUnusualActivityParamsMetric = "volatility"
	GetUnusualActivityParamsMetricVolume     GetUnusualActivityParamsMetric = "volume"
)

// Defines values for GetUnusualActivityParamsWindow.
const (
	GetUnusualActivityParamsWindowN1h  GetUnusualActivityParamsWindow = "1h"
	GetUnusualActivityParamsWindowN24h GetUnusualActivityParamsWindow = "24h"
)

// ArbLite Arbitrage opportunity (lite version)
type ArbLite struct {
	// DepthTier Depth tier (Small, Medium, Large)
	DepthTier ArbLiteDepthTier `json:"depth_tier"`

	// EdgeBps Arbitrage edge in basis points
	EdgeBps float32 `json:"edge_bps"`

	// FeesIncluded Whether fees are included in edge calculation
	FeesIncluded bool `json:"fees_included"`

	// InstrumentId Canonical instrument identifier
	InstrumentId string `json:"instrument_id"`

	// LastSeenMs When opportunity was last observed (epoch ms)
	LastSeenMs int `json:"last_seen_ms"`

	// LongVenue Venue to go long for arbitrage
	LongVenue ArbLiteLongVenue `json:"long_venue"`

	// PersistenceMs How long opportunity has persisted (ms)
	PersistenceMs int `json:"persistence_ms"`

	// ShortVenue Venue to go short for arbitrage
	ShortVenue ArbLiteShortVenue `json:"short_venue"`
}

// ArbLiteDepthTier Depth tier (Small, Medium, Large)
type ArbLiteDepthTier string

// ArbLiteLongVenue Venue to go long for arbitrage
type ArbLiteLongVenue string

// ArbLiteShortVenue Venue to go short for arbitrage
type ArbLiteShortVenue string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code
	Code string `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error message
	Error string `json:"error"`
}

// Market Market summary for UI display
type Market struct {
	// Category Market category
	Category *MarketCategory `json:"category,omitempty"`

	// DeepLink Link to detailed market view
	DeepLink string `json:"deep_link"`

	// ImpliedProbNow Current implied probability
	ImpliedProbNow float32 `json:"implied_prob_now"`

	// InstrumentId Canonical instrument identifier
	InstrumentId string `json:"instrument_id"`

	// ProbChange1h Probability change over 1h (can be negative)
	ProbChange1h *float32 `json:"prob_change_1h,omitempty"`

	// ProbChange24h Probability change over 24h (can be negative)
	ProbChange24h *float32 `json:"prob_change_24h,omitempty"`

	// TimeToResolution Expected resolution timestamp
	TimeToResolution *time.Time `json:"time_to_resolution,omitempty"`

	// Title Human-readable market title
	Title string `json:"title"`

	// Venues Venues where market is available
	Venues []MarketVenues `json:"venues"`

	// Volume24h 24h trading volume in USD
	Volume24h *float32 `json:"volume_24h,omitempty"`
}

// MarketCategory Market category
type MarketCategory string

// MarketVenues defines model for Market.Venues.
type MarketVenues string

// MarketListResponse defines model for MarketListResponse.
type MarketListResponse struct {
	Markets  []Market  `json:"markets"`
	PageInfo *PageInfo `json:"page_info,omitempty"`

	// TotalCount Total number of available markets
	TotalCount int `json:"total_count"`
}

// Mover Price mover over time window
type Mover struct {
	// DeltaBps Price change in basis points
	DeltaBps int `json:"delta_bps"`

	// ImbalanceIndex Order flow imbalance index
	ImbalanceIndex int `json:"imbalance_index"`

	// InstrumentId Canonical instrument identifier
	InstrumentId string `json:"instrument_id"`

	// ProbNow Current implied probability
	ProbNow float32 `json:"prob_now"`

	// ProbPrev Previous probability at window start
	ProbPrev float32 `json:"prob_prev"`

	// TsMs Timestamp (epoch ms)
	TsMs int `json:"ts_ms"`

	// Window Time window for movement calculation
	Window MoverWindow `json:"window"`
}

// MoverWindow Time window for movement calculation
type MoverWindow string

// PageInfo defines model for PageInfo.
type PageInfo struct {
	// Cursor Cursor for pagination
	Cursor *string `json:"cursor,omitempty"`

	// HasNextPage Whether more results are available
	HasNextPage bool `json:"has_next_page"`
}

// ResolutionEvent Market resolution event
type ResolutionEvent struct {
	// Description Event description
	Description *string `json:"description,omitempty"`

	// EventType Type of resolution event
	EventType ResolutionEventEventType `json:"event_type"`

	// InstrumentId Canonical instrument identifier
	InstrumentId string `json:"instrument_id"`

	// ResolutionTime Expected resolution time
	ResolutionTime time.Time `json:"resolution_time"`

	// Title Event title
	Title string `json:"title"`

	// VenueId Primary venue for this market
	VenueId ResolutionEventVenueId `json:"venue_id"`
}

// ResolutionEventEventType Type of resolution event
type ResolutionEventEventType string

// ResolutionEventVenueId Primary venue for this market
type ResolutionEventVenueId string

// Unusual Unusual activity detection
type Unusual struct {
	// InstrumentId Canonical instrument identifier
	InstrumentId string `json:"instrument_id"`

	// Metric Type of unusual activity
	Metric UnusualMetric `json:"metric"`

	// TsMs Timestamp (epoch ms)
	TsMs int `json:"ts_ms"`

	// Window Analysis time window
	Window UnusualWindow `json:"window"`

	// Zscore Z-score indicating unusualness level
	Zscore float32 `json:"zscore"`
}

// UnusualMetric Type of unusual activity
type UnusualMetric string

// UnusualWindow Analysis time window
type UnusualWindow string

// VenueHealth Venue connector health status
type VenueHealth struct {
	// LastEventTsMs Last event timestamp (epoch ms)
	LastEventTsMs int `json:"last_event_ts_ms"`

	// MessagesPerSecond Current message throughput
	MessagesPerSecond *float32 `json:"messages_per_second,omitempty"`

	// ObservedAtMs Health check timestamp (epoch ms)
	ObservedAtMs int `json:"observed_at_ms"`

	// StalenessSeconds Data staleness in seconds
	StalenessSeconds *float32 `json:"staleness_seconds,omitempty"`

	// Status Current health status
	Status VenueHealthStatus `json:"status"`

	// VenueId Venue identifier
	VenueId VenueHealthVenueId `json:"venue_id"`
}

// VenueHealthStatus Current health status
type VenueHealthStatus string

// VenueHealthVenueId Venue identifier
type VenueHealthVenueId string

// WhaleLite Whale flow detection (lite version)
type WhaleLite struct {
	// Direction Flow direction
	Direction WhaleLiteDirection `json:"direction"`

	// Impact Market impact level
	Impact WhaleLiteImpact `json:"impact"`

	// InstrumentId Canonical instrument identifier
	InstrumentId string `json:"instrument_id"`

	// PostMoveBps Price movement after flow (bps)
	PostMoveBps int `json:"post_move_bps"`

	// TsMs Timestamp (epoch ms)
	TsMs int `json:"ts_ms"`

	// VenueId Venue where flow was detected
	VenueId WhaleLiteVenueId `json:"venue_id"`
}

// WhaleLiteDirection Flow direction
type WhaleLiteDirection string

// WhaleLiteImpact Market impact level
type WhaleLiteImpact string

// WhaleLiteVenueId Venue where flow was detected
type WhaleLiteVenueId string

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// GetArbitrageOpportunitiesParams defines parameters for GetArbitrageOpportunities.
type GetArbitrageOpportunitiesParams struct {
	// MinEdgeBps Minimum edge in basis points
	MinEdgeBps *int `form:"min_edge_bps,omitempty" json:"min_edge_bps,omitempty"`

	// Venues Comma-separated list of venues
	Venues *string `form:"venues,omitempty" json:"venues,omitempty"`

	// DepthTier Depth tier filter
	DepthTier *GetArbitrageOpportunitiesParamsDepthTier `form:"depth_tier,omitempty" json:"depth_tier,omitempty"`

	// Limit Maximum number of opportunities to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetArbitrageOpportunitiesParamsDepthTier defines parameters for GetArbitrageOpportunities.
type GetArbitrageOpportunitiesParamsDepthTier string

// GetCalendarParams defines parameters for GetCalendar.
type GetCalendarParams struct {
	// DaysAhead Number of days ahead to look
	DaysAhead *int `form:"days_ahead,omitempty" json:"days_ahead,omitempty"`

	// Venues Comma-separated list of venues
	Venues *string `form:"venues,omitempty" json:"venues,omitempty"`

	// Limit Maximum number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetWhaleFlowsParams defines parameters for GetWhaleFlows.
type GetWhaleFlowsParams struct {
	// Impact Minimum impact level
	Impact *GetWhaleFlowsParamsImpact `form:"impact,omitempty" json:"impact,omitempty"`

	// Venues Comma-separated list of venues
	Venues *string `form:"venues,omitempty" json:"venues,omitempty"`

	// Limit Maximum number of flows to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetWhaleFlowsParamsImpact defines parameters for GetWhaleFlows.
type GetWhaleFlowsParamsImpact string

// GetMarketsParams defines parameters for GetMarkets.
type GetMarketsParams struct {
	// Limit Maximum number of markets to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Venues Comma-separated list of venues to filter by
	Venues *string `form:"venues,omitempty" json:"venues,omitempty"`

	// Category Market category filter
	Category *GetMarketsParamsCategory `form:"category,omitempty" json:"category,omitempty"`
}

// GetMarketsParamsCategory defines parameters for GetMarkets.
type GetMarketsParamsCategory string

// GetMoversParams defines parameters for GetMovers.
type GetMoversParams struct {
	// Window Time window for movement calculation
	Window GetMoversParamsWindow `form:"window" json:"window"`

	// MinDeltaBps Minimum price change in basis points
	MinDeltaBps *int `form:"min_delta_bps,omitempty" json:"min_delta_bps,omitempty"`

	// Limit Maximum number of movers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMoversParamsWindow defines parameters for GetMovers.
type GetMoversParamsWindow string

// GetUnusualActivityParams defines parameters for GetUnusualActivity.
type GetUnusualActivityParams struct {
	// Metric Type of unusual activity
	Metric *GetUnusualActivityParamsMetric `form:"metric,omitempty" json:"metric,omitempty"`

	// Window Time window for analysis
	Window *GetUnusualActivityParamsWindow `form:"window,omitempty" json:"window,omitempty"`

	// MinZscore Minimum z-score threshold
	MinZscore *float32 `form:"min_zscore,omitempty" json:"min_zscore,omitempty"`

	// Limit Maximum number of activities to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetUnusualActivityParamsMetric defines parameters for GetUnusualActivity.
type GetUnusualActivityParamsMetric string

// GetUnusualActivityParamsWindow defines parameters for GetUnusualActivity.
type GetUnusualActivityParamsWindow string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetArbitrageOpportunities request
	GetArbitrageOpportunities(ctx context.Context, params *GetArbitrageOpportunitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCalendar request
	GetCalendar(ctx context.Context, params *GetCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWhaleFlows request
	GetWhaleFlows(ctx context.Context, params *GetWhaleFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarkets request
	GetMarkets(ctx context.Context, params *GetMarketsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMovers request
	GetMovers(ctx context.Context, params *GetMoversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnusualActivity request
	GetUnusualActivity(ctx context.Context, params *GetUnusualActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVenueHealth request
	GetVenueHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetArbitrageOpportunities(ctx context.Context, params *GetArbitrageOpportunitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetArbitrageOpportunitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCalendar(ctx context.Context, params *GetCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCalendarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWhaleFlows(ctx context.Context, params *GetWhaleFlowsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWhaleFlowsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarkets(ctx context.Context, params *GetMarketsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMovers(ctx context.Context, params *GetMoversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMoversRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnusualActivity(ctx context.Context, params *GetUnusualActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnusualActivityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVenueHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVenueHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetArbitrageOpportunitiesRequest generates requests for GetArbitrageOpportunities
func NewGetArbitrageOpportunitiesRequest(server string, params *GetArbitrageOpportunitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/arb")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MinEdgeBps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_edge_bps", runtime.ParamLocationQuery, *params.MinEdgeBps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Venues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "venues", runtime.ParamLocationQuery, *params.Venues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DepthTier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth_tier", runtime.ParamLocationQuery, *params.DepthTier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCalendarRequest generates requests for GetCalendar
func NewGetCalendarRequest(server string, params *GetCalendarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calendar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DaysAhead != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "days_ahead", runtime.ParamLocationQuery, *params.DaysAhead); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Venues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "venues", runtime.ParamLocationQuery, *params.Venues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWhaleFlowsRequest generates requests for GetWhaleFlows
func NewGetWhaleFlowsRequest(server string, params *GetWhaleFlowsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/flows")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Impact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "impact", runtime.ParamLocationQuery, *params.Impact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Venues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "venues", runtime.ParamLocationQuery, *params.Venues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketsRequest generates requests for GetMarkets
func NewGetMarketsRequest(server string, params *GetMarketsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/markets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Venues != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "venues", runtime.ParamLocationQuery, *params.Venues); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Category != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMoversRequest generates requests for GetMovers
func NewGetMoversRequest(server string, params *GetMoversParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "window", runtime.ParamLocationQuery, params.Window); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.MinDeltaBps != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_delta_bps", runtime.ParamLocationQuery, *params.MinDeltaBps); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnusualActivityRequest generates requests for GetUnusualActivity
func NewGetUnusualActivityRequest(server string, params *GetUnusualActivityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unusual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Metric != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metric", runtime.ParamLocationQuery, *params.Metric); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Window != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "window", runtime.ParamLocationQuery, *params.Window); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinZscore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_zscore", runtime.ParamLocationQuery, *params.MinZscore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVenueHealthRequest generates requests for GetVenueHealth
func NewGetVenueHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/venue-health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetArbitrageOpportunitiesWithResponse request
	GetArbitrageOpportunitiesWithResponse(ctx context.Context, params *GetArbitrageOpportunitiesParams, reqEditors ...RequestEditorFn) (*GetArbitrageOpportunitiesResponse, error)

	// GetCalendarWithResponse request
	GetCalendarWithResponse(ctx context.Context, params *GetCalendarParams, reqEditors ...RequestEditorFn) (*GetCalendarResponse, error)

	// GetWhaleFlowsWithResponse request
	GetWhaleFlowsWithResponse(ctx context.Context, params *GetWhaleFlowsParams, reqEditors ...RequestEditorFn) (*GetWhaleFlowsResponse, error)

	// GetMarketsWithResponse request
	GetMarketsWithResponse(ctx context.Context, params *GetMarketsParams, reqEditors ...RequestEditorFn) (*GetMarketsResponse, error)

	// GetMoversWithResponse request
	GetMoversWithResponse(ctx context.Context, params *GetMoversParams, reqEditors ...RequestEditorFn) (*GetMoversResponse, error)

	// GetUnusualActivityWithResponse request
	GetUnusualActivityWithResponse(ctx context.Context, params *GetUnusualActivityParams, reqEditors ...RequestEditorFn) (*GetUnusualActivityResponse, error)

	// GetVenueHealthWithResponse request
	GetVenueHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVenueHealthResponse, error)
}

type GetArbitrageOpportunitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ArbLite
	JSON400      *BadRequest
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetArbitrageOpportunitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetArbitrageOpportunitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResolutionEvent
	JSON400      *BadRequest
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWhaleFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WhaleLite
	JSON400      *BadRequest
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetWhaleFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWhaleFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MarketListResponse
	JSON400      *BadRequest
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetMarketsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMoversResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Mover
	JSON400      *BadRequest
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetMoversResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMoversResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnusualActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Unusual
	JSON400      *BadRequest
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetUnusualActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnusualActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVenueHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VenueHealth
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetVenueHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVenueHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetArbitrageOpportunitiesWithResponse request returning *GetArbitrageOpportunitiesResponse
func (c *ClientWithResponses) GetArbitrageOpportunitiesWithResponse(ctx context.Context, params *GetArbitrageOpportunitiesParams, reqEditors ...RequestEditorFn) (*GetArbitrageOpportunitiesResponse, error) {
	rsp, err := c.GetArbitrageOpportunities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetArbitrageOpportunitiesResponse(rsp)
}

// GetCalendarWithResponse request returning *GetCalendarResponse
func (c *ClientWithResponses) GetCalendarWithResponse(ctx context.Context, params *GetCalendarParams, reqEditors ...RequestEditorFn) (*GetCalendarResponse, error) {
	rsp, err := c.GetCalendar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCalendarResponse(rsp)
}

// GetWhaleFlowsWithResponse request returning *GetWhaleFlowsResponse
func (c *ClientWithResponses) GetWhaleFlowsWithResponse(ctx context.Context, params *GetWhaleFlowsParams, reqEditors ...RequestEditorFn) (*GetWhaleFlowsResponse, error) {
	rsp, err := c.GetWhaleFlows(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWhaleFlowsResponse(rsp)
}

// GetMarketsWithResponse request returning *GetMarketsResponse
func (c *ClientWithResponses) GetMarketsWithResponse(ctx context.Context, params *GetMarketsParams, reqEditors ...RequestEditorFn) (*GetMarketsResponse, error) {
	rsp, err := c.GetMarkets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketsResponse(rsp)
}

// GetMoversWithResponse request returning *GetMoversResponse
func (c *ClientWithResponses) GetMoversWithResponse(ctx context.Context, params *GetMoversParams, reqEditors ...RequestEditorFn) (*GetMoversResponse, error) {
	rsp, err := c.GetMovers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMoversResponse(rsp)
}

// GetUnusualActivityWithResponse request returning *GetUnusualActivityResponse
func (c *ClientWithResponses) GetUnusualActivityWithResponse(ctx context.Context, params *GetUnusualActivityParams, reqEditors ...RequestEditorFn) (*GetUnusualActivityResponse, error) {
	rsp, err := c.GetUnusualActivity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnusualActivityResponse(rsp)
}

// GetVenueHealthWithResponse request returning *GetVenueHealthResponse
func (c *ClientWithResponses) GetVenueHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVenueHealthResponse, error) {
	rsp, err := c.GetVenueHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVenueHealthResponse(rsp)
}

// ParseGetArbitrageOpportunitiesResponse parses an HTTP response from a GetArbitrageOpportunitiesWithResponse call
func ParseGetArbitrageOpportunitiesResponse(rsp *http.Response) (*GetArbitrageOpportunitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetArbitrageOpportunitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ArbLite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCalendarResponse parses an HTTP response from a GetCalendarWithResponse call
func ParseGetCalendarResponse(rsp *http.Response) (*GetCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResolutionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWhaleFlowsResponse parses an HTTP response from a GetWhaleFlowsWithResponse call
func ParseGetWhaleFlowsResponse(rsp *http.Response) (*GetWhaleFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWhaleFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WhaleLite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMarketsResponse parses an HTTP response from a GetMarketsWithResponse call
func ParseGetMarketsResponse(rsp *http.Response) (*GetMarketsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMoversResponse parses an HTTP response from a GetMoversWithResponse call
func ParseGetMoversResponse(rsp *http.Response) (*GetMoversResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMoversResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Mover
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUnusualActivityResponse parses an HTTP response from a GetUnusualActivityWithResponse call
func ParseGetUnusualActivityResponse(rsp *http.Response) (*GetUnusualActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnusualActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Unusual
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVenueHealthResponse parses an HTTP response from a GetVenueHealthWithResponse call
func ParseGetVenueHealthResponse(rsp *http.Response) (*GetVenueHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVenueHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VenueHealth
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
