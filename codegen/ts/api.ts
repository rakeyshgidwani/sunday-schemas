/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/markets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List markets
         * @description Returns a list of available prediction markets with current pricing and metadata
         */
        get: operations["getMarkets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/arb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List arbitrage opportunities
         * @description Returns current arbitrage opportunities between venues
         */
        get: operations["getArbitrageOpportunities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/movers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List price movers
         * @description Returns instruments with significant price movements
         */
        get: operations["getMovers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List whale flows
         * @description Returns detected large trade flows (whale activity)
         */
        get: operations["getWhaleFlows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unusual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List unusual activity
         * @description Returns detected unusual volume or volatility activity
         */
        get: operations["getUnusualActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List resolution events
         * @description Returns upcoming market resolution events and deadlines
         */
        get: operations["getCalendar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/venue-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get venue health status
         * @description Returns current health status of all venue connectors
         */
        get: operations["getVenueHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Arbitrage opportunity (lite version) */
        ArbLite: {
            /** @description Canonical instrument identifier */
            instrument_id: string;
            /**
             * @description Venue to go long for arbitrage
             * @enum {string}
             */
            long_venue: "polymarket" | "kalshi";
            /**
             * @description Venue to go short for arbitrage
             * @enum {string}
             */
            short_venue: "polymarket" | "kalshi";
            /** @description Arbitrage edge in basis points */
            edge_bps: number;
            /**
             * @description Depth tier (Small, Medium, Large)
             * @enum {string}
             */
            depth_tier: "S" | "M" | "L";
            /** @description How long opportunity has persisted (ms) */
            persistence_ms: number;
            /** @description When opportunity was last observed (epoch ms) */
            last_seen_ms: number;
            /** @description Whether fees are included in edge calculation */
            fees_included: boolean;
        };
        /** @description Price mover over time window */
        Mover: {
            /** @description Canonical instrument identifier */
            instrument_id: string;
            /**
             * @description Time window for movement calculation
             * @enum {string}
             */
            window: "1h" | "24h";
            /** @description Current implied probability */
            prob_now: number;
            /** @description Previous probability at window start */
            prob_prev: number;
            /** @description Price change in basis points */
            delta_bps: number;
            /** @description Order flow imbalance index */
            imbalance_index: number;
            /** @description Timestamp (epoch ms) */
            ts_ms: number;
        };
        /** @description Whale flow detection (lite version) */
        WhaleLite: {
            /** @description Canonical instrument identifier */
            instrument_id: string;
            /**
             * @description Venue where flow was detected
             * @enum {string}
             */
            venue_id: "polymarket" | "kalshi";
            /**
             * @description Market impact level
             * @enum {string}
             */
            impact: "LOW" | "MED" | "HIGH";
            /**
             * @description Flow direction
             * @enum {string}
             */
            direction: "buy" | "sell";
            /** @description Price movement after flow (bps) */
            post_move_bps: number;
            /** @description Timestamp (epoch ms) */
            ts_ms: number;
        };
        /** @description Unusual activity detection */
        Unusual: {
            /** @description Canonical instrument identifier */
            instrument_id: string;
            /**
             * @description Type of unusual activity
             * @enum {string}
             */
            metric: "volume" | "volatility";
            /**
             * @description Analysis time window
             * @enum {string}
             */
            window: "1h" | "24h";
            /** @description Z-score indicating unusualness level */
            zscore: number;
            /** @description Timestamp (epoch ms) */
            ts_ms: number;
        };
        /** @description Venue connector health status */
        VenueHealth: {
            /**
             * @description Venue identifier
             * @enum {string}
             */
            venue_id: "polymarket" | "kalshi";
            /**
             * @description Current health status
             * @enum {string}
             */
            status: "CONNECTED" | "DEGRADED" | "STALE";
            /** @description Last event timestamp (epoch ms) */
            last_event_ts_ms: number;
            /** @description Current message throughput */
            messages_per_second?: number;
            /** @description Data staleness in seconds */
            staleness_seconds?: number;
            /** @description Health check timestamp (epoch ms) */
            observed_at_ms: number;
        };
        MarketListResponse: {
            markets: components["schemas"]["Market"][];
            /** @description Total number of available markets */
            total_count: number;
            page_info?: components["schemas"]["PageInfo"];
        };
        /** @description Market summary for UI display */
        Market: {
            /** @description Canonical instrument identifier */
            instrument_id: string;
            /** @description Human-readable market title */
            title: string;
            /** @description Venues where market is available */
            venues: ("polymarket" | "kalshi")[];
            /** @description Current implied probability */
            implied_prob_now: number;
            /** @description Probability change over 1h (can be negative) */
            prob_change_1h?: number;
            /** @description Probability change over 24h (can be negative) */
            prob_change_24h?: number;
            /** @description 24h trading volume in USD */
            volume_24h?: number;
            /**
             * Format: date-time
             * @description Expected resolution timestamp
             */
            time_to_resolution?: string;
            /**
             * Format: uri
             * @description Link to detailed market view
             */
            deep_link: string;
            /**
             * @description Market category
             * @enum {string}
             */
            category?: "politics" | "crypto" | "economics" | "sports" | "weather";
        };
        /** @description Market resolution event */
        ResolutionEvent: {
            /** @description Canonical instrument identifier */
            instrument_id: string;
            /** @description Event title */
            title: string;
            /**
             * Format: date-time
             * @description Expected resolution time
             */
            resolution_time: string;
            /**
             * @description Primary venue for this market
             * @enum {string}
             */
            venue_id: "polymarket" | "kalshi";
            /**
             * @description Type of resolution event
             * @enum {string}
             */
            event_type: "market_close" | "result_announcement" | "expiry";
            /** @description Event description */
            description?: string;
        };
        PageInfo: {
            /** @description Whether more results are available */
            has_next_page: boolean;
            /** @description Cursor for pagination */
            cursor?: string;
        };
        ErrorResponse: {
            /** @description Error message */
            error: string;
            /** @description Error code */
            code: string;
            /** @description Additional error details */
            details?: Record<string, never>;
        };
    };
    responses: {
        /** @description Bad request - invalid parameters */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": "Invalid parameter value",
                 *       "code": "INVALID_PARAMETER",
                 *       "details": {
                 *         "parameter": "min_edge_bps",
                 *         "provided": -5,
                 *         "expected": "non-negative integer"
                 *       }
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "error": "Internal server error",
                 *       "code": "INTERNAL_ERROR"
                 *     } */
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getMarkets: {
        parameters: {
            query?: {
                /** @description Maximum number of markets to return */
                limit?: number;
                /** @description Comma-separated list of venues to filter by */
                venues?: string;
                /** @description Market category filter */
                category?: "politics" | "crypto" | "economics" | "sports" | "weather";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of markets */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MarketListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalError"];
        };
    };
    getArbitrageOpportunities: {
        parameters: {
            query?: {
                /** @description Minimum edge in basis points */
                min_edge_bps?: number;
                /** @description Comma-separated list of venues */
                venues?: string;
                /** @description Depth tier filter */
                depth_tier?: "S" | "M" | "L";
                /** @description Maximum number of opportunities to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of arbitrage opportunities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArbLite"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalError"];
        };
    };
    getMovers: {
        parameters: {
            query: {
                /** @description Time window for movement calculation */
                window: "1h" | "24h";
                /** @description Minimum price change in basis points */
                min_delta_bps?: number;
                /** @description Maximum number of movers to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of price movers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Mover"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalError"];
        };
    };
    getWhaleFlows: {
        parameters: {
            query?: {
                /** @description Minimum impact level */
                impact?: "LOW" | "MED" | "HIGH";
                /** @description Comma-separated list of venues */
                venues?: string;
                /** @description Maximum number of flows to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of whale flows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WhaleLite"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalError"];
        };
    };
    getUnusualActivity: {
        parameters: {
            query?: {
                /** @description Type of unusual activity */
                metric?: "volume" | "volatility";
                /** @description Time window for analysis */
                window?: "1h" | "24h";
                /** @description Minimum z-score threshold */
                min_zscore?: number;
                /** @description Maximum number of activities to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of unusual activities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Unusual"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalError"];
        };
    };
    getCalendar: {
        parameters: {
            query?: {
                /** @description Number of days ahead to look */
                days_ahead?: number;
                /** @description Comma-separated list of venues */
                venues?: string;
                /** @description Maximum number of events to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of resolution events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResolutionEvent"][];
                };
            };
            400: components["responses"]["BadRequest"];
            500: components["responses"]["InternalError"];
        };
    };
    getVenueHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of venue health statuses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VenueHealth"][];
                };
            };
            500: components["responses"]["InternalError"];
        };
    };
}
