name: Release (root tag)

on:
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write
  id-token: write

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: npm ci

      # Quality gates and validation
      - name: Lint OpenAPI spec
        run: npx spectral lint openapi/ui.v1.yaml

      - name: Lint JSON schemas
        run: |
          find schemas/json -name "*.json" -exec npx jsonlint -q {} \;
          find schemas/examples -name "*.json" -exec npx jsonlint -q {} \;

      - name: Validate schemas and examples
        run: |
          node scripts/validate-schemas.js
          node scripts/validate-examples.js

      # Bundle OpenAPI for both package and assets
      - name: Bundle OpenAPI spec
        run: npx @redocly/cli bundle openapi/ui.v1.yaml -o openapi/ui.v1.bundled.json

      - name: Build TypeScript package
        run: npm run build:ts

      # Keep artifacts for downstream jobs
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            openapi/ui.v1.bundled.json
            packages/ts/src/**/*.d.ts

  publish-npm:
    needs: validate-and-build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Verify version matches tag
        run: node scripts/check-version-matches-tag.mjs

      - name: Prepare package for publishing
        run: |
          mkdir -p packages/ts/openapi
          cp openapi/ui.v1.yaml packages/ts/openapi/
          cp openapi/ui.v1.bundled.json packages/ts/openapi/

      - name: Build TypeScript package
        run: npm run build:ts

      - name: Publish to npm (stable)
        if: ${{ !contains(github.ref_name, '-rc.') }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --workspace=@rakeyshgidwani/sunday-schemas

      - name: Publish to npm (prerelease â†’ next)
        if: ${{ contains(github.ref_name, '-rc.') }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --workspace=@rakeyshgidwani/sunday-schemas --tag next

  create-go-tag:
    needs: validate-and-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create codegen/go/ tag matching root tag
        run: |
          GIT_TAG=${GITHUB_REF_NAME}
          GO_TAG="codegen/go/${GIT_TAG}"
          echo "Creating Go tag: $GO_TAG"
          git tag -a "$GO_TAG" -m "Go module release $GO_TAG" "$GIT_TAG" || true
          git push origin "$GO_TAG" || true

  build-release-assets:
    needs: validate-and-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Prepare dist directory
        run: |
          mkdir -p dist/schemas/{json,examples,registries}
          mkdir -p dist/openapi
          cp -r schemas/json/* dist/schemas/json/
          cp -r schemas/examples/* dist/schemas/examples/
          cp -r schemas/registries/* dist/schemas/registries/
          cp openapi/ui.v1.yaml dist/openapi/
          cp openapi/ui.v1.bundled.json dist/openapi/

      - name: Build agents pack
        run: npm run build:agents

      - name: Create agents pack zip
        run: |
          cd dist && zip -r agents/pack.zip \
            agents/index.json \
            agents/cheatsheet.md \
            openapi/ui.v1.bundled.json \
            schemas/json \
            schemas/examples 2>/dev/null || true

      - name: Generate checksums
        run: |
          cd dist
          find . -type f -name "*.json" -o -name "*.yaml" -o -name "*.zip" | xargs sha256sum > checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/agents/**
            dist/openapi/**
            dist/schemas/**
            dist/checksums.txt
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ## Sunday Schemas Release ${{ github.ref_name }}

            ### Published Packages
            - **npm**: `@rakeyshgidwani/sunday-schemas@${{ github.ref_name }}`
            - **Go**: `github.com/rakeyshgidwani/sunday-schemas/codegen/go@${{ github.ref_name }}`

            ### Assets
            - `agents/pack.zip` - Complete schemas bundle for automated consumption
            - `agents/index.json` - Machine-readable schema index
            - `openapi/ui.v1.bundled.json` - Bundled OpenAPI specification
            - `checksums.txt` - SHA256 checksums for all artifacts

            ### Changes
            See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc.') }}